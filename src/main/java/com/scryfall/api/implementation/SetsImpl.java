/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.scryfall.api.implementation;

import retrofit2.Retrofit;
import com.scryfall.api.Sets;
import com.google.common.reflect.TypeToken;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.scryfall.api.models.ErrorException;
import com.scryfall.api.models.Set;
import com.scryfall.api.models.SetList;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Sets.
 */
public class SetsImpl implements Sets {
    /** The Retrofit service to perform REST calls. */
    private SetsService service;
    /** The service client containing this operation class. */
    private ScryfallClientImpl client;

    /**
     * Initializes an instance of Sets.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public SetsImpl(Retrofit retrofit, ScryfallClientImpl client) {
        this.service = retrofit.create(SetsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Sets to be
     * used by Retrofit to perform actually REST calls.
     */
    interface SetsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.scryfall.api.Sets getAll" })
        @GET("sets")
        Observable<Response<ResponseBody>> getAll();

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.scryfall.api.Sets getByCode" })
        @GET("sets/{code}")
        Observable<Response<ResponseBody>> getByCode(@Path("code") String code);

    }

    /**
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SetList object if successful.
     */
    public SetList getAll() {
        return getAllWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SetList> getAllAsync(final ServiceCallback<SetList> serviceCallback) {
        return ServiceFuture.fromResponse(getAllWithServiceResponseAsync(), serviceCallback);
    }

    /**
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SetList object
     */
    public Observable<SetList> getAllAsync() {
        return getAllWithServiceResponseAsync().map(new Func1<ServiceResponse<SetList>, SetList>() {
            @Override
            public SetList call(ServiceResponse<SetList> response) {
                return response.body();
            }
        });
    }

    /**
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SetList object
     */
    public Observable<ServiceResponse<SetList>> getAllWithServiceResponseAsync() {
        return service.getAll()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SetList>>>() {
                @Override
                public Observable<ServiceResponse<SetList>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SetList> clientResponse = getAllDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SetList> getAllDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return this.client.restClient().responseBuilderFactory().<SetList, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SetList>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     *
     * @param code the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Set object if successful.
     */
    public Set getByCode(String code) {
        return getByCodeWithServiceResponseAsync(code).toBlocking().single().body();
    }

    /**
     *
     * @param code the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Set> getByCodeAsync(String code, final ServiceCallback<Set> serviceCallback) {
        return ServiceFuture.fromResponse(getByCodeWithServiceResponseAsync(code), serviceCallback);
    }

    /**
     *
     * @param code the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Set object
     */
    public Observable<Set> getByCodeAsync(String code) {
        return getByCodeWithServiceResponseAsync(code).map(new Func1<ServiceResponse<Set>, Set>() {
            @Override
            public Set call(ServiceResponse<Set> response) {
                return response.body();
            }
        });
    }

    /**
     *
     * @param code the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Set object
     */
    public Observable<ServiceResponse<Set>> getByCodeWithServiceResponseAsync(String code) {
        if (code == null) {
            throw new IllegalArgumentException("Parameter code is required and cannot be null.");
        }
        return service.getByCode(code)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Set>>>() {
                @Override
                public Observable<ServiceResponse<Set>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Set> clientResponse = getByCodeDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Set> getByCodeDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Set, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Set>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

}
