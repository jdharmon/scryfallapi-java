/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.scryfall.api.implementation;

import retrofit2.Retrofit;
import com.scryfall.api.Rulings;
import com.google.common.reflect.TypeToken;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.scryfall.api.models.ErrorException;
import com.scryfall.api.models.RulingList;
import java.io.IOException;
import java.util.UUID;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Rulings.
 */
public class RulingsImpl implements Rulings {
    /** The Retrofit service to perform REST calls. */
    private RulingsService service;
    /** The service client containing this operation class. */
    private ScryfallClientImpl client;

    /**
     * Initializes an instance of Rulings.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public RulingsImpl(Retrofit retrofit, ScryfallClientImpl client) {
        this.service = retrofit.create(RulingsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Rulings to be
     * used by Retrofit to perform actually REST calls.
     */
    interface RulingsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.scryfall.api.Rulings getByMultiverseId" })
        @GET("cards/multiverse/{id}/rulings")
        Observable<Response<ResponseBody>> getByMultiverseId(@Path("id") int id);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.scryfall.api.Rulings getByMtgoId" })
        @GET("cards/mtgo/{id}/rulings")
        Observable<Response<ResponseBody>> getByMtgoId(@Path("id") int id);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.scryfall.api.Rulings getByCodeByNumberId" })
        @GET("cards/{code}/{number}/rulings")
        Observable<Response<ResponseBody>> getByCodeByNumberId(@Path("code") String code, @Path("number") int number);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.scryfall.api.Rulings getById" })
        @GET("cards/{id}/rulings")
        Observable<Response<ResponseBody>> getById(@Path("id") UUID id);

    }

    /**
     *
     * @param id the int value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RulingList object if successful.
     */
    public RulingList getByMultiverseId(int id) {
        return getByMultiverseIdWithServiceResponseAsync(id).toBlocking().single().body();
    }

    /**
     *
     * @param id the int value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RulingList> getByMultiverseIdAsync(int id, final ServiceCallback<RulingList> serviceCallback) {
        return ServiceFuture.fromResponse(getByMultiverseIdWithServiceResponseAsync(id), serviceCallback);
    }

    /**
     *
     * @param id the int value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RulingList object
     */
    public Observable<RulingList> getByMultiverseIdAsync(int id) {
        return getByMultiverseIdWithServiceResponseAsync(id).map(new Func1<ServiceResponse<RulingList>, RulingList>() {
            @Override
            public RulingList call(ServiceResponse<RulingList> response) {
                return response.body();
            }
        });
    }

    /**
     *
     * @param id the int value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RulingList object
     */
    public Observable<ServiceResponse<RulingList>> getByMultiverseIdWithServiceResponseAsync(int id) {
        return service.getByMultiverseId(id)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RulingList>>>() {
                @Override
                public Observable<ServiceResponse<RulingList>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RulingList> clientResponse = getByMultiverseIdDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<RulingList> getByMultiverseIdDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return this.client.restClient().responseBuilderFactory().<RulingList, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<RulingList>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     *
     * @param id the int value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RulingList object if successful.
     */
    public RulingList getByMtgoId(int id) {
        return getByMtgoIdWithServiceResponseAsync(id).toBlocking().single().body();
    }

    /**
     *
     * @param id the int value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RulingList> getByMtgoIdAsync(int id, final ServiceCallback<RulingList> serviceCallback) {
        return ServiceFuture.fromResponse(getByMtgoIdWithServiceResponseAsync(id), serviceCallback);
    }

    /**
     *
     * @param id the int value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RulingList object
     */
    public Observable<RulingList> getByMtgoIdAsync(int id) {
        return getByMtgoIdWithServiceResponseAsync(id).map(new Func1<ServiceResponse<RulingList>, RulingList>() {
            @Override
            public RulingList call(ServiceResponse<RulingList> response) {
                return response.body();
            }
        });
    }

    /**
     *
     * @param id the int value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RulingList object
     */
    public Observable<ServiceResponse<RulingList>> getByMtgoIdWithServiceResponseAsync(int id) {
        return service.getByMtgoId(id)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RulingList>>>() {
                @Override
                public Observable<ServiceResponse<RulingList>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RulingList> clientResponse = getByMtgoIdDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<RulingList> getByMtgoIdDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return this.client.restClient().responseBuilderFactory().<RulingList, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<RulingList>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     *
     * @param code the String value
     * @param number the int value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RulingList object if successful.
     */
    public RulingList getByCodeByNumberId(String code, int number) {
        return getByCodeByNumberIdWithServiceResponseAsync(code, number).toBlocking().single().body();
    }

    /**
     *
     * @param code the String value
     * @param number the int value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RulingList> getByCodeByNumberIdAsync(String code, int number, final ServiceCallback<RulingList> serviceCallback) {
        return ServiceFuture.fromResponse(getByCodeByNumberIdWithServiceResponseAsync(code, number), serviceCallback);
    }

    /**
     *
     * @param code the String value
     * @param number the int value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RulingList object
     */
    public Observable<RulingList> getByCodeByNumberIdAsync(String code, int number) {
        return getByCodeByNumberIdWithServiceResponseAsync(code, number).map(new Func1<ServiceResponse<RulingList>, RulingList>() {
            @Override
            public RulingList call(ServiceResponse<RulingList> response) {
                return response.body();
            }
        });
    }

    /**
     *
     * @param code the String value
     * @param number the int value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RulingList object
     */
    public Observable<ServiceResponse<RulingList>> getByCodeByNumberIdWithServiceResponseAsync(String code, int number) {
        if (code == null) {
            throw new IllegalArgumentException("Parameter code is required and cannot be null.");
        }
        return service.getByCodeByNumberId(code, number)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RulingList>>>() {
                @Override
                public Observable<ServiceResponse<RulingList>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RulingList> clientResponse = getByCodeByNumberIdDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<RulingList> getByCodeByNumberIdDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<RulingList, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<RulingList>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     *
     * @param id the UUID value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RulingList object if successful.
     */
    public RulingList getById(UUID id) {
        return getByIdWithServiceResponseAsync(id).toBlocking().single().body();
    }

    /**
     *
     * @param id the UUID value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RulingList> getByIdAsync(UUID id, final ServiceCallback<RulingList> serviceCallback) {
        return ServiceFuture.fromResponse(getByIdWithServiceResponseAsync(id), serviceCallback);
    }

    /**
     *
     * @param id the UUID value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RulingList object
     */
    public Observable<RulingList> getByIdAsync(UUID id) {
        return getByIdWithServiceResponseAsync(id).map(new Func1<ServiceResponse<RulingList>, RulingList>() {
            @Override
            public RulingList call(ServiceResponse<RulingList> response) {
                return response.body();
            }
        });
    }

    /**
     *
     * @param id the UUID value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RulingList object
     */
    public Observable<ServiceResponse<RulingList>> getByIdWithServiceResponseAsync(UUID id) {
        if (id == null) {
            throw new IllegalArgumentException("Parameter id is required and cannot be null.");
        }
        return service.getById(id)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RulingList>>>() {
                @Override
                public Observable<ServiceResponse<RulingList>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RulingList> clientResponse = getByIdDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<RulingList> getByIdDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<RulingList, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<RulingList>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

}
